// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/pajbot.proto

/*
Package pajbot is a generated protocol buffer package.

It is generated from these files:
	grpc/pajbot.proto

It has these top-level messages:
	Empty
	HelloRequest
	HelloReply
	User
	MessageRequest
	TimeoutAction
	SayAction
	Action
	MessageAction
*/
package pajbot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type User struct {
	// User ID (i.e. 194028910)
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// User login name (i.e. testaccount_420)
	LoginName string `protobuf:"bytes,2,opt,name=loginName" json:"loginName,omitempty"`
	// User display name (i.e. TestAccount_420)
	DisplayName string `protobuf:"bytes,3,opt,name=displayName" json:"displayName,omitempty"`
	// Level according to the sender
	Level uint32 `protobuf:"varint,4,opt,name=level" json:"level,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetLoginName() string {
	if m != nil {
		return m.LoginName
	}
	return ""
}

func (m *User) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *User) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type MessageRequest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	// Channel ID (i.e. 192930184501)
	ChannelID string `protobuf:"bytes,2,opt,name=channelID" json:"channelID,omitempty"`
	Source    *User  `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
}

func (m *MessageRequest) Reset()                    { *m = MessageRequest{} }
func (m *MessageRequest) String() string            { return proto.CompactTextString(m) }
func (*MessageRequest) ProtoMessage()               {}
func (*MessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MessageRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MessageRequest) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *MessageRequest) GetSource() *User {
	if m != nil {
		return m.Source
	}
	return nil
}

type TimeoutAction struct {
	Target   string `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	Duration int32  `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
	Reason   string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *TimeoutAction) Reset()                    { *m = TimeoutAction{} }
func (m *TimeoutAction) String() string            { return proto.CompactTextString(m) }
func (*TimeoutAction) ProtoMessage()               {}
func (*TimeoutAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TimeoutAction) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *TimeoutAction) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TimeoutAction) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type SayAction struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *SayAction) Reset()                    { *m = SayAction{} }
func (m *SayAction) String() string            { return proto.CompactTextString(m) }
func (*SayAction) ProtoMessage()               {}
func (*SayAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SayAction) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Action struct {
	// Types that are valid to be assigned to Action:
	//	*Action_TimeoutAction
	//	*Action_SayAction
	Action isAction_Action `protobuf_oneof:"action"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (m *Action) String() string            { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isAction_Action interface {
	isAction_Action()
}

type Action_TimeoutAction struct {
	TimeoutAction *TimeoutAction `protobuf:"bytes,1,opt,name=timeoutAction,oneof"`
}
type Action_SayAction struct {
	SayAction *SayAction `protobuf:"bytes,2,opt,name=sayAction,oneof"`
}

func (*Action_TimeoutAction) isAction_Action() {}
func (*Action_SayAction) isAction_Action()     {}

func (m *Action) GetAction() isAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *Action) GetTimeoutAction() *TimeoutAction {
	if x, ok := m.GetAction().(*Action_TimeoutAction); ok {
		return x.TimeoutAction
	}
	return nil
}

func (m *Action) GetSayAction() *SayAction {
	if x, ok := m.GetAction().(*Action_SayAction); ok {
		return x.SayAction
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Action) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Action_OneofMarshaler, _Action_OneofUnmarshaler, _Action_OneofSizer, []interface{}{
		(*Action_TimeoutAction)(nil),
		(*Action_SayAction)(nil),
	}
}

func _Action_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Action)
	// action
	switch x := m.Action.(type) {
	case *Action_TimeoutAction:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TimeoutAction); err != nil {
			return err
		}
	case *Action_SayAction:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SayAction); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Action.Action has unexpected type %T", x)
	}
	return nil
}

func _Action_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Action)
	switch tag {
	case 1: // action.timeoutAction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TimeoutAction)
		err := b.DecodeMessage(msg)
		m.Action = &Action_TimeoutAction{msg}
		return true, err
	case 2: // action.sayAction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SayAction)
		err := b.DecodeMessage(msg)
		m.Action = &Action_SayAction{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Action_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Action)
	// action
	switch x := m.Action.(type) {
	case *Action_TimeoutAction:
		s := proto.Size(x.TimeoutAction)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Action_SayAction:
		s := proto.Size(x.SayAction)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MessageAction struct {
	Actions []*Action `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
}

func (m *MessageAction) Reset()                    { *m = MessageAction{} }
func (m *MessageAction) String() string            { return proto.CompactTextString(m) }
func (*MessageAction) ProtoMessage()               {}
func (*MessageAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MessageAction) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "pajbot.Empty")
	proto.RegisterType((*HelloRequest)(nil), "pajbot.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "pajbot.HelloReply")
	proto.RegisterType((*User)(nil), "pajbot.User")
	proto.RegisterType((*MessageRequest)(nil), "pajbot.MessageRequest")
	proto.RegisterType((*TimeoutAction)(nil), "pajbot.TimeoutAction")
	proto.RegisterType((*SayAction)(nil), "pajbot.SayAction")
	proto.RegisterType((*Action)(nil), "pajbot.Action")
	proto.RegisterType((*MessageAction)(nil), "pajbot.MessageAction")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/pajbot.Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pajbot.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pajbot.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/pajbot.proto",
}

// Client API for Client service

type ClientClient interface {
	PerformActions(ctx context.Context, in *MessageAction, opts ...grpc.CallOption) (*Empty, error)
}

type clientClient struct {
	cc *grpc.ClientConn
}

func NewClientClient(cc *grpc.ClientConn) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) PerformActions(ctx context.Context, in *MessageAction, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pajbot.Client/PerformActions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Client service

type ClientServer interface {
	PerformActions(context.Context, *MessageAction) (*Empty, error)
}

func RegisterClientServer(s *grpc.Server, srv ClientServer) {
	s.RegisterService(&_Client_serviceDesc, srv)
}

func _Client_PerformActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).PerformActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pajbot.Client/PerformActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).PerformActions(ctx, req.(*MessageAction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Client_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pajbot.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PerformActions",
			Handler:    _Client_PerformActions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/pajbot.proto",
}

// Client API for MessageChecker service

type MessageCheckerClient interface {
	CheckMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageAction, error)
}

type messageCheckerClient struct {
	cc *grpc.ClientConn
}

func NewMessageCheckerClient(cc *grpc.ClientConn) MessageCheckerClient {
	return &messageCheckerClient{cc}
}

func (c *messageCheckerClient) CheckMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageAction, error) {
	out := new(MessageAction)
	err := grpc.Invoke(ctx, "/pajbot.MessageChecker/CheckMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageChecker service

type MessageCheckerServer interface {
	CheckMessage(context.Context, *MessageRequest) (*MessageAction, error)
}

func RegisterMessageCheckerServer(s *grpc.Server, srv MessageCheckerServer) {
	s.RegisterService(&_MessageChecker_serviceDesc, srv)
}

func _MessageChecker_CheckMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageCheckerServer).CheckMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pajbot.MessageChecker/CheckMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageCheckerServer).CheckMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageChecker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pajbot.MessageChecker",
	HandlerType: (*MessageCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckMessage",
			Handler:    _MessageChecker_CheckMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/pajbot.proto",
}

func init() { proto.RegisterFile("grpc/pajbot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0xba, 0x36, 0x6d, 0x5f, 0x9a, 0x4a, 0x7b, 0x1a, 0x53, 0x55, 0x71, 0xa8, 0x2c, 0x40,
	0x3d, 0x0d, 0x11, 0x24, 0x04, 0x07, 0x84, 0xb6, 0x81, 0x28, 0x07, 0x10, 0x64, 0x70, 0xe2, 0xe4,
	0xa5, 0x8f, 0x2e, 0xe0, 0xc4, 0xc1, 0x76, 0x91, 0x72, 0xe7, 0x0f, 0x47, 0x71, 0xec, 0xac, 0x9d,
	0xd8, 0xcd, 0xdf, 0x8f, 0xbc, 0xef, 0xb3, 0xf5, 0x02, 0xc7, 0x5b, 0x55, 0x65, 0x4f, 0x2b, 0xfe,
	0xf3, 0x5a, 0x9a, 0xb3, 0x4a, 0x49, 0x23, 0x31, 0x6c, 0x11, 0x1b, 0xc1, 0xf0, 0x5d, 0x51, 0x99,
	0x9a, 0x31, 0x98, 0xae, 0x49, 0x08, 0x99, 0xd2, 0xef, 0x1d, 0x69, 0x83, 0x08, 0x83, 0x92, 0x17,
	0x34, 0x0f, 0x96, 0xc1, 0x6a, 0x92, 0xda, 0x33, 0x7b, 0x02, 0xe0, 0x3c, 0x95, 0xa8, 0x71, 0x0e,
	0xa3, 0x82, 0xb4, 0xe6, 0x5b, 0x6f, 0xf2, 0x90, 0x09, 0x18, 0x7c, 0xd3, 0xa4, 0x70, 0x06, 0xfd,
	0x7c, 0xe3, 0xc4, 0x7e, 0xbe, 0xc1, 0x87, 0x30, 0x11, 0x72, 0x9b, 0x97, 0x9f, 0x9a, 0xc1, 0x7d,
	0x4b, 0xdf, 0x12, 0xb8, 0x84, 0x68, 0x93, 0xeb, 0x4a, 0xf0, 0xda, 0xea, 0x47, 0x56, 0xdf, 0xa7,
	0xf0, 0x04, 0x86, 0x82, 0xfe, 0x90, 0x98, 0x0f, 0x96, 0xc1, 0x2a, 0x4e, 0x5b, 0xc0, 0x4a, 0x98,
	0x7d, 0x6c, 0x83, 0x7d, 0xf7, 0x7b, 0x9b, 0x35, 0x0d, 0xb2, 0x1b, 0x5e, 0x96, 0x24, 0x3e, 0xbc,
	0xf5, 0x0d, 0x3a, 0x02, 0x1f, 0x41, 0xa8, 0xe5, 0x4e, 0x65, 0x6d, 0x78, 0x94, 0x4c, 0xcf, 0xdc,
	0x9b, 0x35, 0xb7, 0x49, 0x9d, 0xc6, 0xbe, 0x43, 0xfc, 0x35, 0x2f, 0x48, 0xee, 0xcc, 0x79, 0x66,
	0x72, 0x59, 0xe2, 0x29, 0x84, 0x86, 0xab, 0x2d, 0x19, 0x97, 0xe6, 0x10, 0x2e, 0x60, 0xbc, 0xd9,
	0x29, 0xde, 0x78, 0x6c, 0xd6, 0x30, 0xed, 0x70, 0xf3, 0x8d, 0x22, 0xae, 0x65, 0xe9, 0xee, 0xe9,
	0x10, 0x7b, 0x0c, 0x93, 0x2b, 0x5e, 0xbb, 0xc1, 0xf7, 0xbf, 0xf0, 0xdf, 0x00, 0x42, 0x67, 0x7a,
	0x0d, 0xb1, 0xd9, 0xaf, 0x63, 0xad, 0x51, 0xf2, 0xc0, 0x77, 0x3f, 0xe8, 0xba, 0xee, 0xa5, 0x87,
	0x6e, 0x7c, 0x06, 0x13, 0xed, 0x03, 0x6d, 0xcb, 0x28, 0x39, 0xf6, 0x9f, 0x76, 0x4d, 0xd6, 0xbd,
	0xf4, 0xd6, 0x75, 0x31, 0x86, 0x90, 0xdb, 0x13, 0x7b, 0x05, 0xb1, 0x7b, 0x7a, 0x37, 0x6d, 0x05,
	0xa3, 0x56, 0xd2, 0xf3, 0x60, 0x79, 0xb4, 0x8a, 0x92, 0x99, 0x9f, 0xd5, 0x1a, 0x52, 0x2f, 0x27,
	0xe7, 0x30, 0x7a, 0xaf, 0x88, 0x0c, 0x29, 0x7c, 0x01, 0xe3, 0x2b, 0x5e, 0xdb, 0xcd, 0xc2, 0x13,
	0xef, 0xdf, 0x5f, 0xc6, 0x05, 0xde, 0x61, 0x2b, 0x51, 0xb3, 0x5e, 0x72, 0x01, 0xe1, 0xa5, 0xc8,
	0xa9, 0x34, 0xf8, 0x12, 0x66, 0x9f, 0x49, 0xfd, 0x90, 0xaa, 0x68, 0x63, 0x34, 0x76, 0xd7, 0x3f,
	0xe8, 0xb7, 0x88, 0x3d, 0xdd, 0x2e, 0x7d, 0x2f, 0xf9, 0xd2, 0x2d, 0xcf, 0xe5, 0x0d, 0x65, 0xbf,
	0x48, 0xe1, 0x1b, 0x98, 0xda, 0xa3, 0xa3, 0xf1, 0xf4, 0xce, 0x24, 0xdf, 0xe9, 0xff, 0x09, 0xac,
	0x77, 0x1d, 0xda, 0x3f, 0xec, 0xf9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x98, 0x7b, 0x78,
	0x76, 0x03, 0x00, 0x00,
}
